/*
 * useminpre
 * git@github.com:McLemore/useminpre.git
 *
 * Copyright (c) 2015 McLemore
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function (grunt) {

  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks

  grunt.registerMultiTask('useminpre', 'generate blocks for usemin', function () {

    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
        }),
        s4 = function() {
            return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
        },
        guid = function() {
            return (s4()+s4());
        };
    
    // Iterate over all specified file groups.
    this.files.forEach(function (file) {
      // Concat specified files.
      file.src.filter(function (filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      }).forEach(function (filepath) {
        // Read file source.
        var src = grunt.file.read(filepath),
            outstr = src,
            jsReg = new RegExp("<script.+src\\s*=\\s*[\"\']?((\/.*\/)(.{0,3}|.*(?!\\.min).{4})\\.js)[\"\']?.*</script>\\s*(<script.+src\\s*=\\s*[\"\']?(\\2(.{0,3}|.*(?!\\.min).{4})\\.js)[\"\']?.*</script>\\s*)*","g"),
            cssReg = new RegExp("<link.+href\\s*=\\s*[\"\']?((\/.*\/)(.{0,3}|.*(?!\\.min).{4})\\.css)[\"\']?.*>\\s*(<link.+href\\s*=\\s*[\"\']?(\\2(.{0,3}|.*(?!\\.min).{4})\\.css)[\"\']?.*>\\s*)*","g"),
            jsStr = "\n<!-- build:js path -->\ntag\n<!-- endbuild -->\n",
            cssStr = "\n<!-- build:css path -->\ntag\n<!-- endbuild -->\n",
            replace = function(type) {
                var map = {
                        "js" : {
                            "reg" : jsReg,
                            "str" : jsStr
                        },
                        "css" : {
                            "reg" : cssReg,
                            "str" : cssStr
                        }
                    },
                    reg = map[type]["reg"],
                    str = map[type]["str"],
                    match = null;
             
                while ((match = reg.exec(src)) !== null) {
                    var path = match[1].replace("." + type,guid() + ".min." + type);
                    
                    grunt.log.warn(match);
                    outstr = outstr.replace(match[0],str.replace("path",path).replace("tag",match[0]));
                }
            };
          
            ["js","css"].forEach(function(i) {
                replace(i);
            });
            grunt.file.write(filepath,outstr);
      });

    });
  });

};
